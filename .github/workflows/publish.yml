# Reusable workflow for building and publishing Docker images to Docker Hub

name: Build and Publish Docker Images

on:
  workflow_call:
    inputs:
      apps:
        description: 'JSON array of apps to build and publish (e.g., ["smoker", "device-service", "backend", "frontend"])'
        type: string
        required: true
      version:
        description: 'Version tag for Docker images'
        type: string
        required: true
      ref:
        description: 'Git ref to checkout'
        type: string
        required: false
        default: 'master'
      registry:
        description: 'Docker registry to push to'
        type: string
        required: false
        default: 'docker.io'
      mode:
        description: 'Publish mode: release (latest+vX.Y.Z) or nightly (nightly only)'
        type: string
        required: false
        default: 'release'
      platforms:
        description: 'Comma-separated platforms to build (e.g., linux/arm/v7 or linux/amd64,linux/arm/v7)'
        type: string
        required: false
        default: 'linux/arm/v7'
      prebuild:
        description: 'Run application build before Docker build'
        type: boolean
        required: false
        default: false
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  # Install dependencies once
  install:
    uses: ./.github/workflows/install.yml
    with:
      ref: ${{ inputs.ref }}
      artifact_name: 'publish-workspace'
      include_node_modules: true

  # Build and publish Docker images
  publish:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(inputs.apps) }}

    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: publish-workspace
          path: .

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24.7.0'

      - name: Use npm 10
        run: npm i -g npm@10

      - name: Cache Node Modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Prebuild ${{ matrix.app }} (optional)
        if: ${{ inputs.prebuild == true }}
        run: |
          case "${{ matrix.app }}" in
            "backend")
              npm run build --prefix apps/backend
              ;;
            "device-service")
              npm run build --prefix apps/device-service
              ;;
            "frontend")
              npm run build --prefix apps/frontend
              ;;
            "smoker")
              npm run build:prod --prefix apps/smoker
              ;;
            "electron-shell")
              npm run forgeLinux64:thin --prefix apps/smoker
              ;;
            *)
              echo "Unknown app: ${{ matrix.app }}"
              exit 1
              ;;
          esac

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Prepare device-service ARMv7 node_modules
        if: ${{ matrix.app == 'device-service' }}
        run: |
          docker run --rm --platform linux/arm/v7 \
            -v "$PWD":/work -w /work/apps/device-service \
            node:20-bookworm-slim bash -lc "apt-get update && apt-get install -y --no-install-recommends python3 make g++ && npm ci --omit=dev --legacy-peer-deps"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ${{ matrix.app }} Docker image
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.app == 'electron-shell' && 'linux/arm/v7' || (matrix.app == 'device-service' && 'linux/arm/v7') || inputs.platforms }}
          context: .
          file: |
            ${{ 
              matrix.app == 'backend' && 'apps/backend/Dockerfile' ||
              matrix.app == 'device-service' && 'apps/device-service/Dockerfile' ||
              matrix.app == 'frontend' && 'apps/frontend/Dockerfile' ||
              matrix.app == 'smoker' && 'apps/smoker/Dockerfile' ||
              matrix.app == 'electron-shell' && 'apps/smoker/shell.dockerfile' ||
              ''
            }}
          push: true
          tags: |
            ${{ inputs.mode == 'release' && format('{0}/smart-smoker-{1}:latest', secrets.DOCKERHUB_USERNAME, matrix.app) || '' }}
            ${{ inputs.mode == 'release' && format('{0}/smart-smoker-{1}:v{2}', secrets.DOCKERHUB_USERNAME, matrix.app, inputs.version) || '' }}
            ${{ inputs.mode == 'nightly' && format('{0}/smart-smoker-{1}:nightly', secrets.DOCKERHUB_USERNAME, matrix.app) || '' }}
